#!/bin/bash
#
# vault-secret-pki
#
# Helper script to check whether a backend is mounted.
#
######################################################################
# Script configuraiton
######################################################################

version=0.1.0

app_id='BFAD6293-FD9F-4F6F-8555-D326B99F31D5'

user_id=`facter ec2_instance_id`
user_id=${user_id:-`sudo facter uuid`}
if [ "$user_id" == "Not Settable" ]; then
  if [ ! -e /etc/UUID ]; then
    touch /etc/UUID
    chown root:root /etc/UUID
    chmod 0600 /etc/UUID
    uuidgen > /etc/UUID
    chmod 0400 /etc/UUID
  fi
  user_id=`cat /etc/UUID`
fi

vault_addr=${VAULT_ADDR:-https://127.0.0.1:8200}

######################################################################
# Functions
######################################################################

usage(){
  cat <<EOF
  Usage: $0 [<options>] -- <mount> ...

  --version         Show the version of this script
  --help            Display this mess
  --show-app-id     Output this application's app-id
  --token <token>   Use <token> to authenticate to Vault.  If not provided,
                    VAULT_TOKEN environment variable will be used.  Prefix
                    with @ to read token from a file
  --addr <address>  Connect to Vault server at <address>.  Uses VAULT_ADDR
                    environment variable as default, and falls back to
                    https://127.0.0.1:8200 if neither the parameter not the
                    environment variable are set
  --app-id <id>     Use <id> to authenticate to App ID auth backend.  If not
                    specified, this script's default app-id is used
EOF

  exit 1
}

version(){
  cat <<EOF
  vault-secret-pki version $version

EOF

  exit 0
}

show_app_id(){
  echo -n $app_id

  exit 0
}

strip_leading_at(){
  input=$1
  output=`echo -n $input | sed -e 's/^@//'`

  echo -n $output

  if [ "$input" == "$output" ]; then
    return 1
  else
    return 0
  fi
}

log(){ echo -e "\e[32m\e[1m--> ${1}...\e[0m"; }
warn(){ echo -e "\e[33m\e[1mWARNING: ${1}\e[0m"; }
error(){ echo -e "\e[31m\e[1mERROR: ${1}\e[0m"; }
fatal(){ echo -e "\e[31m\e[1mFATAL: ${1}\e[0m"; exit 1; }

######################################################################
# Script start
######################################################################

PARSED_OPTIONS=$(getopt -n "$0" -o hvst:a: --long "help,version,show-app-id,token:,addr:,app-id:" -- "$@")

if [ $? -ne 0 ]; then
  usage
fi

eval set -- "$PARSED_OPTIONS"
while true; do
  case "$1" in
    -h|--help)
      usage;;
    -v|--version)
      version;;
    -s|--show-app-id)
      show_app_id;;
    -t|--token)
      vault_token=$2
      shift 2;;
    --addr)
      vault_addr=$2
      shift 2;;
    -a|--app-id)
      app_id=$2
      shift 2;;
    --)
      shift
      break;;
    *)
      error "unknown option $1"
      usage;;
  esac
done

mounts=( $* )

# validate and mutate inputs
vault_token=`strip_leading_at "$vault_token"`
if [ "$?" -eq "0" ]; then
  # token had a leading "@"; read token from file
  vault_token=`cat $vault_token 2>/dev/null`
fi

if [ -z "$vault_token" -a -z "$VAULT_TOKEN" ]; then
  # log in to Vault
  vault_token=`curl \
    -s \
    -X POST \
    -d "{\"app_id\":\"${app_id}\",\"user_id\":\"${user_id}\"}" \
    ${vault_addr}/v1/auth/app-id/login \
    | jq -r '.["auth"]["client_token"]' 2>/dev/null`

  if [ -z "$vault_token" ]; then
    fatal 'Unable to authenticate to Vault'
  fi

  # flag token for cleanup
  generated_token=1
fi

# set up the environment
if [ -n "$vault_token" ]; then
  export VAULT_TOKEN=$vault_token
fi
if [ -n "$vault_addr" ]; then
  export VAULT_ADDR=$vault_addr
fi

for mount in ${mounts[@]}; do
  if ! vault mounts | grep -qs "^${mount}/"; then
    if [ ${generated_token:-0} -eq 1 ]; then
      # clean up after ourself
      curl \
        -s \
        -X POST \
        -H "X-Vault-Token: ${vault_token}" \
        ${vault_addr}/v1/auth/token/revoke/${vault_token}
    fi

    exit 1
  fi
done

if [ ${generated_token:-0} -eq 1 ]; then
  # clean up after ourself
  curl \
    -s \
    -X POST \
    -H "X-Vault-Token: ${vault_token}" \
    ${vault_addr}/v1/auth/token/revoke/${vault_token}
fi

exit 0
