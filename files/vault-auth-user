#!/bin/bash
#
# vault-auth-user
#
# Helper script to authorise a given user access with a specific app-id from
# a specific network source address, using the App ID auth backend.
#
######################################################################
# Script configuration
######################################################################

version=0.1.0

auth_app_id='426CB96A-A754-44BC-A16C-29FCCC59A0FF'

auth_user_id=`facter ec2_instance_id`
auth_user_id=${auth_user_id:-`sudo facter uuid`}
if [ "$auth_user_id" == "Not Settable" ]; then
  if [ ! -e /etc/UUID ]; then
    touch /etc/UUID
    chown root:root /etc/UUID
    chmod 0600 /etc/UUID
    uuidgen > /etc/UUID
    chmod 0400 /etc/UUID
  fi
  auth_user_id=`cat /etc/UUID`
fi

vault_addr=${VAULT_ADDR:-https://127.0.0.1:8200}

unset http_proxy
unset https_proxy

######################################################################
# Functions
######################################################################

usage(){
  cat <<EOF
  Usage: $0 [<options>]

  --version              Show the version of this script
  --help                 Display this mess
  --show-app-id          Output this application's app-id (for Vault auth to
                         App ID auth backend)
  --token <token>        Use <token> to authenticate with vault.  If not
                         provided, VAULT TOKEN environment variable will be
                         used.  Prefix with @ to read token from a file
  --addr <address>       Connect to vault server at <address>.  Uses
                         VAULT_ADDR environment variable as default, and
                         falls back to https://127.0.0.1:8200 if neither the
                         parameter nor the environment variable are set
  --enable-backend       Enable the App ID auth backend if it's not already
                         enabled
  --app-id <id>          Configure authentication for app-id <id>.  Prefix with
                         @ to request app-id from the application.  The
                         application must support the --show-app-id flag for
                         this to work
  --user-id <id>         Configure authenticate for user-id <id>.  If not
                         provided, the EC2 instance ID or UUID will be used
  --cidr-block <cidr>    Limit access to the given CIDR block

EOF

  exit 1
}

version(){
  cat <<EOF
  vault-auth-user version $version

EOF

  exit 0
}

show_app_id(){
  echo -n $app_id

  exit 0
}

strip_leading_at(){
  input=$1
  output=`echo -n $input | sed -e 's/^@//'`

  echo -n $output

  if [ "$input" == "$output" ]; then
    return 1
  else
    return 0
  fi
}

log(){ echo -e "\e[32m\e[1m--> ${1}...\e[0m"; }
warn(){ echo -e "\e[33m\e[1mWARNING: ${1}\e[0m"; }
error(){ echo -e "\e[31m\e[1mERROR: ${1}\e[0m"; }
fatal(){ echo -e "\e[31m\e[1mFATAL: ${1}\e[0m"; exit 1; }

######################################################################
# Script start
######################################################################

PARSED_OPTIONS=$(getopt -n "$0" -o hvst:ea:u:c: --long "help,version,show-app-id,token:,addr:,enable-backend,app-id:,user-id:,cidr-block:" -- "$@")

if [ $? -ne 0 ]; then
  usage
fi

eval set -- "$PARSED_OPTIONS"
while true; do
  case "$1" in
    -h|--help)
      usage;;
    -v|--version)
      version;;
    -s|--show-app-id)
      show_app_id;;
    -t|--token)
      vault_token=$2
      shift 2;;
    --addr)
      vault_addr=$2
      shift 2;;
    -e|--enable-backend)
      enable_backend=1
      shift;;
    -a|--app-id)
      app_id=$2
      shift 2;;
    -u|--user-id)
      user_id=$2
      shift 2;;
    -c|--cidr-block)
      cidr_block=$2
      shift 2;;
    --)
      shift
      break;;
    *)
      error "unknown option $1"
      usage;;
  esac
done


# validate and mutate inputs
vault_token=`strip_leading_at "$vault_token"`
if [ "$?" -eq "0" ]; then
  # token had a leading "@"; read token from file
  vault_token=`cat $vault_token 2>/dev/null`
fi

if [ -z "$vault_token" -a -z "$VAULT_TOKEN" ]; then
  # log in to Vault
  vault_token=`curl \
    -s \
    -X POST \
    -d "{\"app_id\":\"${auth_app_id}\",\"user_id\":\"${auth_user_id}\"}" \
    ${vault_addr}/v1/auth/app-id/login \
    | jq -r '.["auth"]["client_token"]' 2>/dev/null`

  if [ -z "$vault_token" ]; then
    fatal 'Unable to authenticate to Vault'
  fi

  # flag token for cleanup
  generated_token=1
fi

app_id=`strip_leading_at "$app_id"`
if [ "$?" -eq "0" ]; then
  # app_id had a leading "@"; get app_id directly from app
  app_id=`$app_id --show-app-id 2>/dev/null`
fi

if [ -z "$app_id" ]; then
  fatal "app-id is required"
fi

for user_id in "$user_id" `facter ec2_instance_id` `sudo facter uuid`; do
  if [ -n "$user_id" ]; then
    break
  fi
done
if [ -z "$user_id" ]; then
  fatal "user-id is required"
fi

if [ -n "$cidr_block" ]; then
  cidr_block=" cidr_block=$cidr_block"
fi

# set up the environment
if [ -n "$vault_token" ]; then
  export VAULT_TOKEN=$vault_token
fi
if [ -n "$vault_addr" ]; then
  export VAULT_ADDR=$vault_addr
fi

# ensure App ID auth backend is enabled
if ! vault auth -methods | grep -qs '^app-id/'; then
  if [ "$enable_backend" -eq "1" ]; then
    vault auth-enable app-id
  else
    fatal "App ID auth backend is not enabled (need --enable-backend?)"
  fi
fi
if ! vault auth -methods | grep -qs '^app-id/'; then
  fatal "Unable to enable App ID auth backend"
fi

# vault write will replace rather than append to the App IDs this user
# associates with, so we retrieve existing App IDs first and perform the
# merge ourselves
existing_app_ids=`vault read auth/app-id/map/user-id/$user_id \
  | grep '^value' | awk '{print $2}'`

if ! echo "$existing_app_ids" | grep -qs "^(.*,)?$app_id(,.*)?$"; then
  app_id="${existing_app_ids},${app_id}"
  # configure access for user-id
  vault write auth/app-id/map/user-id/$user_id value=$app_id$cidr_block
fi

if [ ${generated_token:-0} -eq 1 ]; then
  # clean up after ourself
  curl \
    -s \
    -X POST \
    -H "X-Vault-Token: ${vault_token}" \
    ${vault_addr}/v1/auth/token/revoke/${vault_token}
fi
