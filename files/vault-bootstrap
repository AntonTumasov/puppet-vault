#!/bin/bash
#
# vault-bootstrap
#
# Safely bootstrap a Vault instance, including unsealing it and securely
# providing unseal keys to a list of users.
#
# Parameters to the script after a double hyphen ("--") are the usernames
# corresponding to the accounts that encrypted keys and key shards will be
# saved to.  e.g.:
#
#  vault-bootstrap -- john jane bob sigfried roy
#
#  Each account listed must have an ~/.ssh/id_rsa.pub or an
#  ~/.ssh/authorized_keys file containing at least one ssh public key.
#
# The number of key shares for unsealing Vault will be equal to the number
# of users specified on the command line.  The key threshold is derived from
# that as follows:
#
# - 1 key share          => 1 key required to unseal
# - 2 key shares         => 1 key required to unseal
# - 3 key shares         => 2 keys required to unseal
# - 4 key shares         => 2 keys required to unseal
# - 5 or more key shares => 3 keys required to unseal
#
# It is recommended that a minimum of 5 users be specified on the command
# line for production deployments.
#
# The basic steps followed are:
#
# - ensure backend storage is available (if not, exit indicating success)
# - set up a certificate authority
# - create trusted SSL cert for Vault
# - start, initialise and unseal Vault
# - distribute the initial root token and key shards (one per user) to the
#   admins listed on the command line (encrypted using public ssh key and
#   dropped into each user's home directory)
# - mount the App ID backend
# - create an initial "puppet" policy
# - grant Puppet's app-id + user-id access to the "puppet" policy from the
#   CIDR block in which Vault (all instances in an HA configuration) runs
# - store the CA root certificate in Vault at secret/ssl/certs/ca.cert.pem
# - store the CA root key in Vault at secret/ssl/private/ca.key.pem
# - store the CA intermediate certificate in Vault at
#   secret/ssl/certs/intermediate.cert.pem
# - store the CA intermediate key in Vault at
#   secret/ssl/private/intermediate.key.pem
#
# At this point, the users named on the command line should download the
# encrypted files placed in their home direcories and securely erase them
# from the server.  They can be decrypted on a system that contains the
# relevant private key in ~/.ssh/id_rsa with:
#
# $ cat vault_initial_root_token | openssl rsautl -decrypt -inkey ~/.ssh/id_rsa
# $ cat vault_unseal_key | openssl rsautl -decrypt -inkey ~/.ssh/id_rsa
#
# It is recommended that they be transferred directly to a USB stick from
# the server, and that the USB stick use an encrypted filesystem.  This
# places them behind two levels of encryption.
#
# It is also recommended that the CA root key be retrieved from Vault,
# encrypted, and placed alongside the unseal key and initial root token on
# the encrypted USB stick (note that "unset HISTFILE" is bash-specific; if
# you use a different shell you'll likely need to use a different command to
# prevent command history for the session being saved):
#
# bash$ unset HISTFILE
# bash$ export VAULT_TOKEN='XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
# bash$ vault read secret/ssl/private/ca.key.pem
# bash$ openssl rsa -aes256 -out /path/to/encrypted/usb/stick/ca.key.pem
# <paste unencrypted key into terminal, then hit enter if not prompted for pass phrase immediately>
# bash$ vault read secret/ssl/private/intermediate.key.pem
# bash$ openssl rsa -aes256 -out /path/to/encrypted/usb/stick/intermediate.key.pem
# <paste unencrypted key into terminal, then hit enter if not prompted for pass phrase immediately>
#
# Once all operators have done this, the CA keys should be removed from
# Vault:
#
# bash$ vault delete secret/ssl/private/ca.key.pem
# bash$ vault delete secret/ssl/private/intermediate.key.pem
#
# Note, however, that the vault::backend::secret::pki defined type by
# default uses the intermediate certificate and key from Vault.  If you
# delete the intermediate key from Vault before using Puppet to configure
# the PKI backend, you'll need to provide the intermediate certificate and
# key by passing them in as parameters.
#
######################################################################
# Script configuration
######################################################################

version=0.2.0

declare -a usernames
declare -a keys

# default is no subjectAltName, but the environment variable must exist or
# openssl will complain of the variable having no value
export ALTNAME=''

ec2_instance_id=`facter ec2_instance_id`
uuid=`facter uuid`
if [ "$uuid" == "Not Settable" ] || [ -z "$uuid" ]; then
  if [ ! -e /etc/UUID ]; then
    touch /etc/UUID
    chown root:root /etc/UUID
    chmod 0600 /etc/UUID
    uuidgen > /etc/UUID
    chmod 0400 /etc/UUID
  fi
  uuid=`cat /etc/UUID`
fi

# parameter defaults
common_name=vault
alt_names=IP:127.0.0.1
app_id=puppet
user_id=${ec2_instance_id:-$uuid}
cidr_block=127.0.0.1/32

export RANDFILE=/etc/ssl/private/.rand

unset http_proxy
unset https_proxy

######################################################################
# Functions
######################################################################

usage(){
  cat <<EOF

  Usage: $0 [<options>] -- username ...

  --version             Show the vault-bootstrap version number
  --help                Display this mess
  --common-name <name>  Common name for Vault's SSL certificate
  --alt-names <names>   Subject Alternate Names for Vault's SSL certificate
  --puppet-app-id <id>  Puppet's App ID for accessing Vault
  --puppet-user-id <id> User ID for Puppet to access Vault (usually for the
                        node Vault is being bootstrapped on)
  --cidr-block <cidr>   Limit Puppet user-id and app-id to the specified
                        CIDR block (usually the node Vault is being
                        bootstrapped on)
EOF

  exit 1
}

version(){
  cat <<EOF
  vault-bootstrap version $version

EOF

  exit 0
}

log(){ echo -e "\e[32m\e[1m--> ${1}...\e[0m"; }
warn(){ echo -e "\e[33m\e[1mWARNING: ${1}\e[0m"; }
error(){ echo -e "\e[31m\e[1mERROR: ${1}\e[0m"; }
fatal(){ echo -e "\e[31m\e[1mFATAL: ${1}\e[0m"; exit 1; }

vault_backend(){
  grep ^backend /etc/vault/config.hcl | awk '{print $2}' | sed -e 's/"//g'
}

consul_ready(){
  leader=`curl -s http://127.0.0.1:8500/v1/status/leader | jq -r . 2>&1`
  if [ -n "$leader" ]; then
    return 0
  else
    return 1
  fi
}

vault_backend_ready(){
  backend=`vault_backend`
  case "$backend" in
    file)
      return 0;;
    consul)
      consul_ready
      return $?;;
    *)
      warn "Vault backend ready confirmation not implemented for $backend"
      return 0;;
  esac
}

is_boolean(){
  if [ "$1" == "true" ]; then
    return 0
  elif [ "$1" == "false" ]; then
    return 0
  else
    return 1
  fi
}

vault_start(){
  health=`curl -s https://127.0.0.1:8200/v1/sys/health`
  status=$?
  if [ $status -eq 7 ]; then
    log "Starting Vault"
    sudo service vault start >/dev/null 2>/dev/null
    for i in {1..60}; do
      health=`curl -s https://127.0.0.1:8200/v1/sys/health`
      status=$?
      if [ $status -eq 0 ]; then
        break
      fi
      sleep 1
    done
  fi
  initialised=`echo $health | jq '.["initialized"]' 2>/dev/null`
  sealed=`echo $health | jq '.["sealed"]' 2>/dev/null`
  standby=`echo $health | jq '.["standby"]' 2>/dev/null`
  if ! is_boolean "$initialised"; then
    fatal "Unable to determine Vault initialised state"
  fi
  if ! is_boolean "$sealed"; then
    fatal "Unable to determine Vault sealed state"
  fi
  if ! is_boolean "$standby"; then
    fatal "Unable to determine Vault standby state"
  fi
}


######################################################################
# Script start
######################################################################

PARSED_OPTIONS=$(getopt -n "$0" -o hvc:a:i:u:n: --long "help,version,force,common-name:,alt-names:,puppet-app-id:,puppet-user-id:,cidr-block:" -- "$@")

if [ $? -ne 0 ]; then
  usage
fi

eval set -- "$PARSED_OPTIONS"
while true; do
  case "$1" in
    -h|--help)
      usage;;
    -v|--version)
      version;;
    -c|--common-name)
      common_name=$2
      shift 2;;
    -a|--alt-names)
      alt_names=$2
      shift 2;;
    -i|--puppet-app-id)
      app_id=$2
      shift 2;;
    -u|--puppet-user-id)
      user_id=$2
      shift 2;;
    -n|--cidr-block)
      cidr_block=$2
      shift 2;;
    --)
      shift
      break;;
    *)
      error "unknown option $1"
      usage;;
  esac
done


if ! vault_backend_ready; then
  fatal "Vault backend not ready - will not bootstrap yet"
fi

usernames=( $* )

key_shares=${#usernames[@]}
if [ $key_shares -eq 0 ]; then
  fatal "At least one user account is required"
elif [ $key_shares -lt 5 ]; then
  warn "Less than 5 key shares is not recommended"
  key_threshold=$((($key_shares+1)/2))
else
  key_threshold=3
fi

# default alt_names is just "IP:127.0.0.1".  To allow access to vault using
# other host names or IP addresses, set this to a comma-separated list of
# IP:<address> and DNS:<name> entries.  IP:127.0.0.1 will be added to the
# list if it's not already included - this allows local access without
# setting the VAULT_ADDR environment variable
alt_names=${alt_names:-IP:127.0.0.1}
if ! echo $alt_names | grep -qs 'IP:127.0.0.1'; then
  alt_names="${alt_names}, IP:127.0.0.1"
fi

# validate that all userids passed in have ssh public keys
for username in "${usernames[@]}"; do
  if [ -f "/home/${username}/.ssh/id_rsa.pub.pem" ]; then
    log "Using existing encryption key for user '${username}'"
  elif [ -f "/home/${username}/.ssh/id_rsa.pub" ]; then
    log "Generating id_rsa.pub.pem from id_rsa.pub for user '${username}'"
    ssh-keygen -f "/home/${username}/.ssh/id_rsa.pub" -e -m pem \
      | openssl rsa -RSAPublicKey_in -pubout -out "/home/${username}/.ssh/id_rsa.pub.pem"
  elif [ -f "/home/${username}/.ssh/authorized_keys" ]; then
    log "Generating id_rsa.pub.pem from first authorised key for user '${username}'"
    head -1 "/home/${username}/.ssh/authorized_keys" > "/home/${username}/.ssh/id_rsa.pub"
    ssh-keygen -f "/home/${username}/.ssh/id_rsa.pub" -e -m pem \
      | openssl rsa -RSAPublicKey_in -pubout -out "/home/${username}/.ssh/id_rsa.pub.pem"
  else
    fatal "Unable to find ssh public key for user '${username}'"
  fi
done

for file in /etc/ssl/ca/{private/ca.key.pem,certs/ca.cert.pem,intermediate/{private/intermediate.key.pem,certs/intermediate.cert.pem}} /etc/vault/ssl/vault.{cert,key}.pem; do
  if [ -e $file ]; then
    fatal "${file} already exists, aborting"
  fi
done

for dir in /etc/ssl/ca/{,private,certs,crl,newcerts,intermediate/{,certs,crl,csr,newcerts,private}}; do
  if [[ -d $dir ]]; then
    warn "${dir} already exists, but continuing anyway"
  fi
done

# Build out the directory structure for the certificate authority
mkdir -p /etc/ssl/ca
chmod 0755 /etc/ssl/ca
cd /etc/ssl/ca

mkdir -p private certs crl newcerts
chmod 0700 private
chmod 0755 certs crl newcerts
touch index.txt
echo 1000 > serial
echo 1000 > crlnumber

mkdir -p intermediate
chmod 0755 intermediate
mkdir -p intermediate/{certs,crl,csr,newcerts,private}
chmod 0700 intermediate/private
chmod 0755 intermediate/{certs,crl,csr,newcerts}
touch intermediate/index.txt
echo 1000 > intermediate/serial
echo 1000 > intermediate/crlnumber

cat >openssl.cnf <<'EOF'
[ca]
# Options for the 'ca' rool ('man ca')
default_ca = CA_default

[CA_default]
# Directory and file locations
dir              = /etc/ssl/ca
certs            = $dir/certs
crl_dir          = $dir/crl
new_certs_dir    = $dir/newcerts
database         = $dir/index.txt
serial           = $dir/serial
RANDFILE         = $dir/private/.rand

# The root key and root certificate
private_key      = $dir/private/ca.key.pem
certificate      = $dir/certs/ca.cert.pem

# For certificate revocation lists
crlnumber        = $dir/crlnumber
crl              = $dir/crl/ca.crl.pem
crl_extensions   = crl_ext
default_crl_days = 30

# SHA-1 is deprecated, so use SHA-2 instead
default_md       = sha256

name_opt         = ca_default
cert_opt         = ca_default
default_days     = 375
preserve         = no
policy           = policy_strict
copy_extensions  = copyall

[policy_strict]
# The root CA should only sign intermediate certificates that match.  See
# the POLICY FORMAT section of 'man ca'
countryName            = optional
stateOrProvinceName    = optional
organizationName       = optional
organizationalUnitName = optional
commonName             = supplied
emailAddress           = optional

[policy_loose]
# Allow the intermediate CA to sign a more diverse range of certifications.
# See the POLICY FORMAT section of 'man ca'
countryName            = optional
stateOrProvinceName    = optional
localityName           = optional
organizationName       = optional
organizationalUnitName = optional
commonName             = supplied
emailAddress           = optional

[req]
# Options for the 'req' tool ('man req')
default_bits       = 4096
distinguished_name = req_distinguished_name
string_mask        = utf8only

# SHA-1 is deprecated, so use SHA-2 instead
default_md         = sha256

# Extension to add when the -x509 option is used
x509_extensions    = v3_ca

[req_distinguished_name]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>
countryName                    = Country Name (2 letter code)
stateOrProvinceName            = State or Province Name
localityName                   = Locality Name
0.organizationName             = Organisation Name
organizationalUnitName         = Organisational Unit Name
commonName                     = Common Name
emailAddress                   = Email Address

# Optionally, specify some defaults
countryName_default            = AU
stateOrProvinceName_default    = South Australia
localityName_default           = North Adelaide
0.organizationName_default     = Blackboard
organizationalUnitName_default = NetSpot
emailAddress_default           = ops@netspot.com.au

[v3_req]
subjectAltName = $ENV::ALTNAME

[v3_ca]
# Extensions for a typical CA ('man x509v3_config')
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical, CA:true
keyUsage               = critical, digitalSignature, cRLSign, keyCertSign

[v3_intermediate_ca]
# Extensions for a typical intermediate CA ('man x509v3_config')
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical, CA:true, pathlen:0
keyUsage               = critical, digitalSignature, cRLSign, keyCertSign

[usr_cert]
# Extensions for client certificates ('man x509v4_config')
basicConstraints       = CA:FALSE
nsCertType             = client, email
nsComment              = "OpenSSL Generate Client Certificate"
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
keyUsage               = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage       = clientAuth, emailProtection

[server_cert]
# Extensions for server certificates ('man x509v3_config')
basicConstraints       = CA:FALSE
nsCertType             = server
nsComment              = "OpenSSL Generate Server Certificate"
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage               = critical, digitalSignature, keyEncipherment
extendedKeyUsage       = serverAuth

[crl_ext]
# Extensions for CRLs ('man x509v3_config')
authorityKeyIdentidier = keyid:always

[ocsp]
# Extensions for OCSP signing certificates ('man ocsp')
basicConstraints       = CA:FALSE
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
keyUsage               = critical, digitalSignature
extendedKeyUsage       = critical, OCSPSigning
EOF

cat openssl.cnf | sed \
  -e '/^dir\s*=/s|/etc/ssl/ca|/etc/ssl/ca/intermediate|' \
  -e '/^private_key\s*=/s|ca\.key\.pem|intermediate.key.pem|' \
  -e '/^certificate\s*=/s|ca\.cert\.pem|intermediate.cert.pem|' \
  -e '/^crl\s*=/s|ca\.crl\.pem|intermediate.crl.pem|' \
  -e '/^policy\s*=/s|policy_strict|policy_loose|' \
  > intermediate/openssl.cnf

# create CA root certificate and key (20 year expiry)  TODO: embed CRL that
# references Vault by URL
log "Generating CA root certificate and key"

openssl genrsa -out private/ca.key.pem 4096
chmod 0400 private/ca.key.pem

openssl req -config openssl.cnf \
  -subj '/CN=Certificate Authority Root/emailAddress=ops@netspot.com.au' \
  -key private/ca.key.pem \
  -new -x509 -days 7300 -sha256 -extensions v3_ca \
  -out certs/ca.cert.pem
chmod 0444 certs/ca.cert.pem

# create intermediate root certificate and key (shorter expiry time)  TODO:
# embed CRL that references Vault by URL
log "Generating CA intermediate certificate and key"

openssl genrsa -out intermediate/private/intermediate.key.pem 4096
chmod 0400 intermediate/private/intermediate.key.pem

openssl req -config intermediate/openssl.cnf -new -sha256 \
  -subj '/CN=Certificate Authority Intermediate/emailAddress=ops@netspot.com.au' \
  -key intermediate/private/intermediate.key.pem \
  -out intermediate/csr/intermediate.csr.pem

openssl ca -config openssl.cnf -batch -extensions v3_intermediate_ca \
  -days 3650 -notext -md sha256 \
  -in intermediate/csr/intermediate.csr.pem \
  -out intermediate/certs/intermediate.cert.pem
chmod 0444 intermediate/certs/intermediate.cert.pem

cat \
  intermediate/certs/intermediate.cert.pem \
  certs/ca.cert.pem \
  > intermediate/certs/ca-chain.cert.pem
chmod 0444 intermediate/certs/ca-chain.cert.pem

# deploy CA certificates to system
cp certs/ca.cert.pem /usr/local/share/ca-certificates/ca-root.crt
cp intermediate/certs/intermediate.cert.pem /usr/local/share/ca-certificates/ca-intermediate.crt
update-ca-certificates

# create server certificate and key for vault
log "Generating server certificate and key for Vault"

openssl genrsa -out /etc/vault/ssl/vault.key.pem
chmod 0400 /etc/vault/ssl/vault.key.pem

env ALTNAME="$alt_names" \
  openssl req -config intermediate/openssl.cnf \
  -reqexts v3_req \
  -subj "/CN=${common_name}" \
  -key /etc/vault/ssl/vault.key.pem \
  -new -sha256 -out intermediate/csr/vault.csr.pem

openssl ca -config intermediate/openssl.cnf -batch \
  -extensions server_cert -days 375 -notext -md sha256 \
  -in intermediate/csr/vault.csr.pem \
  -out intermediate/certs/vault.cert.pem
chmod 0444 intermediate/certs/vault.cert.pem

cat \
  intermediate/certs/vault.cert.pem \
  intermediate/certs/intermediate.cert.pem \
  > /etc/vault/ssl/vault.cert.pem

vault_start
if [ "$initialised" == "true" ]; then
  log "Vault already initialised - will not bootstrap"
  exit 0
fi

# initialise vault and capture the output (root token, unseal key shards)
vault_init=`vault init -key-shares=$key_shares -key-threshold=$key_threshold`
for i in $(seq 1 $key_shares); do
  keys[$((i-1))]=`echo "$vault_init" | grep "^Key ${i}: " | awk '{print $3}'`
done
vault_token=`echo "$vault_init" | grep '^Initial Root Token:' | awk '{print $4}'`
export VAULT_TOKEN="$vault_token"

# TODO: ensure we have the expected keys and token.  Fatal error if we don't
echo "$vault_init"

# unseal vault
log "Unsealing vault"
for i in $(seq 1 $key_threshold); do
  curl \
    -s \
    -o /dev/null \
    --cacert /etc/ssl/ca/intermediate/certs/ca-chain.cert.pem \
    -X PUT \
    -H "X-Vault-Token: $vault_token" \
    -d "{\"key\":\"${keys[$((i-1))]}\"}" \
    https://127.0.0.1:8200/v1/sys/unseal
done

# encrypt the root token and key shards (one shard per user) and place in
# each user's home directory
log "Distributing unseal keys and initial root token"
for i in $(seq 0 $((key_shares-1))); do
  echo "${keys[$i]}" | \
    openssl rsautl -encrypt -pubin -inkey "/home/${usernames[$i]}/.ssh/id_rsa.pub.pem" \
    > "/home/${usernames[$i]}/vault_unseal_key"
  echo "$vault_token" | \
    openssl rsautl -encrypt -pubin -inkey "/home/${usernames[$i]}/.ssh/id_rsa.pub.pem" \
    > "/home/${usernames[$i]}/vault_initial_root_token"
done

# wait until vault is completely ready
for i in {1..60}; do
  health=`curl -s https://127.0.0.1:8200/v1/sys/health`
  initialised=`echo $health | jq '.["initialized"]' 2>/dev/null`
  sealed=`echo $health | jq '.["sealed"]' 2>/dev/null`
  standby=`echo $health | jq '.["standby"]' 2>/dev/null`
  if [[ "$initialised" == "true" && "$sealed" == "false" && $standby == "false" ]]; then
    break
  fi
  sleep 1
done
if [[ "$initialised" != "true" || "$sealed" != "false" || $standby != "false" ]]; then
  fatal "Vault should be ready for use, but is not"
fi

# Store certificate authority certs and keys in Vault, and remove keys from
# disk
vault write secret/ssl/certs/ca.cert.pem \
  value=@/etc/ssl/ca/certs/ca.cert.pem
vault write secret/ssl/private/ca.key.pem \
  value=@/etc/ssl/ca/private/ca.key.pem
vault write secret/ssl/certs/intermediate.cert.pem \
  value=@/etc/ssl/ca/intermediate/certs/intermediate.cert.pem
vault write secret/ssl/private/intermediate.key.pem \
  value=@/etc/ssl/ca/intermediate/private/intermediate.key.pem
shred --zero --remove /etc/ssl/ca/private/ca.key.pem
shred --zero --remove /etc/ssl/ca/intermediate/private/intermediate.key.pem

# Enable App ID auth backend
log "Enabling App ID auth backend"
vault auth-enable app-id

# Create "puppet" policy
log "Configuring initial access for Puppet"
mkdir -p /etc/vault/policies
cat <<EOF >/etc/vault/policies/puppet.hcl
# manage app-id to policy mappings
path "sys/auth" {
  policy = "read"
}
path "auth/app-id/map/app-id/*" {
  policy = "sudo"
}

# mount backends and determine which backends are mounted
path "sys/mounts" {
  policy = "read"
}
path "sys/mounts/*" {
  policy = "sudo"
}

# manage policies
path "sys/policy/*" {
  policy = "sudo"
}
EOF
vault policy-write puppet /etc/vault/policies/puppet.hcl

# Give Puppet the required access for it to take over configuration
vault write auth/app-id/map/app-id/$app_id value=puppet display_name=puppet
vault write auth/app-id/map/user-id/$user_id value=$app_id cidr_block=$cidr_block

# Give helper applications the required access to run locally
vault-auth-user --app-id=@deploy-ssl-certificate --cidr-block=$cidr_block

# Set up temporary access for bootstrapping cluster.  It provides limited
# access (it can read and write user-ids for the App ID auth backend and
# has no further access).  Once bootstrapping is completed, both the app-id
# (auth/app-id/map/app-id/bootstrap) and user-id
# (auth/app-id/map/user-id/bootstrap) should be deleted and tests run to
# confirm that Vault is configured correctly.
log "Configuring temporary access for bootstrapping cluster"
cat <<EOF >/etc/vault/policies/auth-user.hcl
# manage user-id to app-id mappings
path "auth/app-id/map/user-id/*" {
  policy = "sudo"
}
path "secret/ssl/certs/*" {
  policy = "read"
}
EOF
vault policy-write auth-user /etc/vault/policies/auth-user.hcl

vault write auth/app-id/map/app-id/bootstrap value=auth-user display_name=bootstrap
vault write auth/app-id/map/user-id/bootstrap value=bootstrap
