#!/bin/bash
#
# allow-ssh-access
#
# Create an SSH key pair for Vault to access this host, deploy the public
# key to the appropriate authorized_keys file, upload the private key to
# Vault, and configure Vault to use it to configure SSH access.
#
# If this script has been run previously with the same parameters, it will
# rotate the key and configure Vault to use the new one.
#
######################################################################
# Script configuration
######################################################################

set -e

version=0.1.0

app_id='535DE9D5-726D-47CB-B814-07B8C02995FE'

user_id=`facter ec2_instance_id`
user_id=${user_id:-`sudo facter uuid`}
if [ "$user_id" == "Not Settable" ] || [ -z "$user_id" ]; then
  if [ ! -e /etc/UUID ]; then
    touch /etc/UUID
    chown root:root /etc/UUID
    chmod 0600 /etc/UUID
    uuidgen > /etc/UUID
    chmod 0400 /etc/UUID
  fi
  user_id=`cat /etc/UUID`
fi

vault_addr=${VAULT_ADDR:-https://127.0.0.1:8200}

unset http_proxy
unset https_proxy

######################################################################
# Functions
######################################################################

usage(){
  cat <<EOF
  Usage: $0 [<options>]

  --version             Show the version of this script
  --help                Display this mess
  --show-app-id         Output this application's app-id (for Vault auth to
                        App ID auth backend)
  --name                A name for the key and role (defaults to unqualified
                        host name)
  --admin-user          The shell account Vault will use to deploy leased
                        credentials.  If using the default install script,
                        requires passwordless sudo access for at least
                        mkdir, touch and tee
  --default-user        The user to provide credentials for by default (can
                        be overridden when requesting credentials if the
                        allowed-users setting is blank or includes the user
                        credentials are requested for)
  --key-type            Type of credentials to generate, one of otp or
                        dynamic (default: otp)
  --cidr-list           Comma separated list of CIDR blocks Vault will
                        attempt to provide access to (defaults to the host
                        this script is run on and should usually not be
                        overridden)
  --exclude-cidr-list   Comma separated list of CIDR blocks within the
                        cidr-list that Vault will not attempt to provide
                        access to
  --port                Port number of service for which credentials are to
                        be generated
  --key-bits            Length of the RSA dynamic key in bits (1024 or 2048,
                        default is 1024)
  --install-script      Script to be used to install and uninstall public
                        keys.  Prefix with @ to specify a filename,
                        otherwise an inline script is expected
  --allowed-users       Comma separated list of users that credentials can
                        be generated for in addition to the default-user.
                        If not provided, credentials can be generated for
                        any user
  --key-option-specs    Comma separated option specification which will be
                        prefixed to RSA keys generated

EOF

  exit 1
}

version(){
  cat <<EOF
  allow-ssh-access verion $version

EOF

  exit 0
}

show_app_id(){
  echo -n $app_id

  exit 0
}

strip_leading_at(){
  input=$1
  output=`echo -n $input | sed -e 's/^@//'`

  echo -n $output

  if [ "$input" == "$output" ]; then
    return 1
  else
    return 0
  fi
}

log(){ echo -e "\e[32m\e[1m--> ${1}...\e[0m"; }
warn(){ echo -e "\e[33m\e[1mWARNING: ${1}\e[0m"; }
error(){ echo -e "\e[31m\e[1mERROR: ${1}\e[0m"; }
fatal(){ echo -e "\e[31m\e[1mFATAL: ${1}\e[0m"; return 1; }

# clean up temporary files on exit
cleanup(){
  if [ -n "$WORKDIR" ] && [ -d "$WORKDIR" ]; then
    rm -rf "$WORKDIR"
  fi
}
trap cleanup EXIT

######################################################################
# Script start
######################################################################

PARSED_OPTIONS=$(getopt -n "$0" -o hvsn:a:d:t:c:e:p:b:i:u:o: --long "help,version,show-app-id,name:,admin-user:,default-user:,key-type:,cidr-list:,exclude-cidr-list:,port:,key-bits:,install-script:,allowed-users:,key-option-specs:" -- "$@")

if [ $? -ne 0 ]; then
  usage
fi

key_name=`facter hostname`
role_name=${key_name}
admin_user=vault
key_type=otp

eval set -- "$PARSED_OPTIONS"
while true; do
  case "$1" in
    -h|--help)
      usage;;
    -v|--version)
      version;;
    -s|--show-app-id)
      show_app_id;;
    -n|--name)
      key_name=$2
      role_name=$2
      shift 2;;
    -a|--admin-user)
      admin_user=$2
      shift 2;;
    -d|--default-user)
      default_user=$2
      shift 2;;
    -t|--key-type)
      key_type=$2
      shift 2;;
    -c|--cidr-list)
      cidr_list=$2
      shift 2;;
    -e|--exclude-cidr-list)
      exclude_cidr_list=$2
      shift 2;;
    -p|--port)
      port=$2
      shift 2;;
    -b|--key-bits)
      key_bits=$2
      shift 2;;
    -i|--install-script)
      install_script=$2
      shift 2;;
    -u|--allowed-users)
      allowed_users=$2
      shift 2;;
    -o|--key-option-specs)
      key_option_specs=$2
      shift 2;;
    --)
      shift
      break;;
    *)
      error "unknown option $1"
      usage;;
  esac
done

# validate and mutate inputs
set +e
install_script=`strip_leading_at "$install_script"`
status=$?
set -e
if [ $status -eq 0 ]; then
  # script had a leading "@"; read script from file, so read it from the
  # named file and convert newlines to '\n' and double quotes to '\"' to
  # make them safe for JSON
  install_script=`cat $install_script 2>/dev/null | sed -e ':a;N;$!ba;s/\\n/\\\\n/g;s/\\"/\\\\"/g'`
  [ -z "$install_script" ] && fatal 'Unable to read install script'
fi

# prepare temporary workspace
WORKDIR=`mktemp -d`
[ -n "$WORKDIR" ] || fatal 'Unable to create working directory'

# create a new key pair
ssh-keygen -q -b 2048 -t rsa -N '' -C '' -f "${WORKDIR}/id_rsa"
# note we convert newlines to "\n" to make them safe for JSON
private_key=`cat ${WORKDIR}/id_rsa 2>/dev/null | sed -e ':a;N;$!ba;s/\\n/\\\\n/g'`
[ -n "$private_key" ] || fatal 'Unable to create ssh key pair'
eval "sudo -u ${admin_user} mkdir -m 0700 -p ~${admin_user}/.ssh"
eval "cp ${WORKDIR}/id_rsa.pub ~${admin_user}/.ssh/authorized_keys2"
eval "chown ${admin_user}:${admin_user} ~${admin_user}/.ssh/authorized_keys2"
eval "chmod 0600 ~${admin_user}/.ssh/authorized_keys2"

# log in to Vault
vault_token=`curl \
  -s \
  -X POST \
  -d "{\"app_id\":\"${app_id}\",\"user_id\":\"${user_id}\"}" \
  ${vault_addr}/v1/auth/app-id/login \
  | jq -r '.["auth"]["client_token"]' 2>/dev/null`

if [ -z "${vault_token}" ]; then
  fatal 'Unable to authenticate to Vault'
fi

# upload the key
key_req="{\"key\":\"${private_key}\"}"
key_resp=`curl \
  -s \
  -X POST \
  -w '%{http_code}' \
  -H "X-Vault-Token: ${vault_token}" \
  -d "${key_req}" \
  ${vault_addr}/v1/ssh/keys/${key_name}`

# validate response - Vault returns a 204 on success
if [ "$key_resp" != "204" ]; then
  fatal "Received '$key_resp' when storing key"
fi

# configure Vault to use the provided SSH key to deploy leased SSH keys

# build the request for Vault
role_req="{\"key\":\"${key_name}\",\"admin_user\":\"${admin_user}\",\"default_user\":\"${default_user}\",\"key_type\":\"${key_type}\""

if [ -n "$cidr_list" ]; then
  role_req="${role_req},\"cidr_list\":\"${cidr_list}\""
fi

if [ -n "$exclude_cidr_list" ]; then
  role_req="${role_req},\"exclude_cidr_list\":\"${exclude_cidr_list}\""
fi

if [ -n "$port" ]; then
  role_req="${role_req},\"port\":\"${port}\""
fi

if [ -n "$key_bits" ]; then
  role_req="${role_req},\"key_bits\":\"${key_bits}\""
fi

if [ -n "$allowed_users" ]; then
  role_req="${role_req},\"allowed_users\":\"${allowed_users}\""
fi

if [ -n "$key_option_specs" ]; then
  role_req="${role_req},\"key_option_specs\":\"${key_option_specs}\""
fi

if [ -n "$install_script" ]; then
  role_req="${role_req},\"install_script\":\"${install_script}\""
fi

role_req="${role_req}}"

role_resp=`curl \
  -s \
  -X POST \
  -w '%{http_code}' \
  -H "X-Vault-Token: ${vault_token}" \
  -d "${role_req}" \
  ${vault_addr}/v1/ssh/roles/${role_name}`

# validate response - Vault returns a 204 on success
if [ "$role_resp" != "204" ]; then
  fatal "Received '$role_resp' when configuring role"
fi

# log out of Vault
curl \
  -s \
  -X POST \
  -H "X-Vault-Token: ${vault_token}" \
  ${vault_addr}/v1/auth/token/revoke/${vault_token}
