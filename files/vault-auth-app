#!/bin/bash
#
# vault-auth-app
#
# Helper script to authorise a given application to access a list of roles
# within Vault using the app-id authentication backend.  Note that this
# script tries to *add* to any existing roles configured, as opposed to
# replacing the list of roles the way vault does natively.
#
######################################################################
# Script configuration
######################################################################

version=0.1.0

auth_app_id='AE199E42-27A1-48EA-A307-DA16AB275A9B'

user_id=`facter ec2_instance_id`
user_id=${user_id:-`sudo facter uuid`}

vault_addr=${VAULT_ADDR:-https://127.0.0.1:8200}

######################################################################
# Functions
######################################################################

usage(){
  cat <<EOF
  Usage: $0 [<options>] -- app-name app-id roles

  --version              Show the version of this script
  --help                 Display this mess
  --show-app-id          Output this application's app-id (for Vault auth to
                         App ID auth backend)
  --check                Determines whether this script would take action
                         with the remaining parameters.  Script returns
                         success if changes are not required or failure if
                         changes are required.  Intended for use in an
                         "unless" argument with Puppet's exec resource
  --token <token>        Use <token> to authenticate with vault.  If not
                         provided, VAULT TOKEN environment variable will be
                         used.  Prefix with @ to read token from a file
  --addr <address>       Connect to vault server at <address>.  Uses
                         VAULT_ADDR environment variable as default, and
                         falls back to https://127.0.0.1:8200 if neither the
                         parameter nor the environment variable are set
  --app-id <id>          Use <id> to authenticate to App ID auth backend.
                         If not specified, this script's default app-id is
                         used
  --enable-backend       Enable the App ID auth backend if it's not already
                         enabled

  The three required parameters are:

  app-name          The application name for audit logs
  app-id            The application id for authentication with the App ID
                    auth backend.  Prefix with @ to request app-id from the
                    application.  The application must support the
                    --show-app-id flag for this to work
  roles             Comma separated list of Vault roles that will be
                    permitted for the provided app-id

EOF

  exit 1
}

version(){
  cat <<EOF
  vault-auth-app version $version

EOF

  exit 0
}

show_app_id(){
  echo -n $app_id

  exit 0
}

strip_leading_at(){
  input=$1
  output=`echo -n $input | sed -e 's/^@//'`

  echo -n $output

  if [ "$input" == "$output" ]; then
    return 1
  else
    return 0
  fi
}

vault_logout(){
  if [ ${generated_token:-0} -eq 1 ]; then
    # attempt to clean up (success predominantly depends on there being a
    # policy in effect that allows it)
    curl \
      -s \
      -o /dev/null \
      -X POST \
      -H "X-Vault-Token: ${vault_token}" \
      ${vault_addr}/v1/auth/token/revoke/${vault_token}
  fi
}

log(){ echo -e "\e[32m\e[1m--> ${1}...\e[0m"; }
warn(){ echo -e "\e[33m\e[1mWARNING: ${1}\e[0m"; }
error(){ echo -e "\e[31m\e[1mERROR: ${1}\e[0m"; }
fatal(){ echo -e "\e[31m\e[1mFATAL: ${1}\e[0m"; exit 1; }

######################################################################
# Script start
######################################################################

PARSED_OPTIONS=$(getopt -n "$0" -o hvsct:a:e --long "help,version,show-app-id,check,token:,addr:,app-id:,enable-backend" -- "$@")

if [ $? -ne 0 ]; then
  usage
fi

eval set -- "$PARSED_OPTIONS"
while true; do
  case "$1" in
    -h|--help)
      usage;;
    -v|--version)
      version;;
    -s|--show-app-id)
      show_app_id;;
    -c|--check)
      check=1
      shift;;
    -t|--token)
      vault_token=$2
      shift 2;;
    --addr)
      vault_addr=$2
      shift 2;;
    -a|--app-id)
      auth_app_id=$2
      shift 2;;
    -e|--enable-backend)
      enable_backend=1
      shift;;
    --)
      shift
      break;;
    *)
      error "unknown option $1"
      usage;;
  esac
done

app_name=$1
app_id=$2
roles=$3

# validate and mutate inputs
vault_token=`strip_leading_at "$vault_token"`
if [ "$?" -eq "0" ]; then
  # token had a leading "@"; read token from file
  vault_token=`cat $vault_token 2>/dev/null`
fi

if [ -z "$vault_token" -a -z "$VAULT_TOKEN" ]; then
  # log in to Vault
  vault_token=`curl \
    -s \
    -X POST \
    -d "{\"app_id\":\"${auth_app_id}\",\"user_id\":\"${user_id}\"}" \
    ${vault_addr}/v1/auth/app-id/login \
    | jq -r '.["auth"]["client_token"]' 2>/dev/null`

  if [ -z "$vault_token" ]; then
    fatal 'Unable to authenticate to Vault'
  fi

  # flag token for cleanup
  generated_token=1
fi

app_id=`strip_leading_at "$app_id"`
if [ "$?" -eq "0" ]; then
  # app_id had a leading "@"; get app_id directly from app
  app_id=`$app_id --show-app-id 2>/dev/null`
fi

if [ -z "$app_id" ]; then
  fatal "app-id is required"
fi

if [ -z "$app_name" ]; then
  app_name=$app_id
fi

if [ -z "$roles" ]; then
  fatal "at least one role is required"
fi

# set up the environment
if [ -n "$vault_token" ]; then
  export VAULT_TOKEN=$vault_token
fi
if [ -n "$vault_addr" ]; then
  export VAULT_ADDR=$vault_addr
fi

# ensure App ID auth backend is enabled
if ! vault auth -methods | grep -qs '^app-id/'; then
  if [ "$check" == "1" ]; then
    vault_logout
    exit 10
  fi
  if [ "$enable_backend" == "1" ]; then
    vault auth-enable app-id
  else
    fatal "App ID auth backend is not enabled (need --enable-backend?)"
  fi
fi
if ! vault auth -methods | grep -qs '^app-id/'; then
  fatal "Unable to enable App ID auth backend"
fi

# grab existing settings
json=`curl \
  -s \
  -H "X-Vault-Token: $vault_token" \
  ${vault_addr}/v1/auth/app-id/map/app-id/${app_id}`

display_name=`echo ${json} | jq -r '.["data"]["display_name"] // ""'`
existing_roles=`echo ${json} | jq -r '.["data"]["value"] // ""'`

declare -A existing_roles_hash
for role in `echo ${existing_roles} | tr ',' ' '`; do
  existing_roles_hash[$role]=1
done

declare -A roles_hash
for role in `echo ${roles} | tr ',' ' '`; do
  roles_hash[$role]=1
done

if [ "$check" -eq "1" ]; then
  if [ "$display_name" != "$app_name" ]; then
    # a change to the display name has been requested
    vault_logout
    exit 1
  fi
  for role in ${!roles_hash[@]}; do
    if [ "${existing_roles_hash[$role]}" != "1" ]; then
      # a role has been requested that isn't already configured
      vault_logout
      exit 2
    fi
  done
else
  # merge existing and request roles into a single de-duplicated list
  for role in ${!existing_roles_hash[@]}; do
    roles_hash[$role]=1
  done
  new_roles=`echo ${!roles_hash[@]} | xargs -n1 | sort -u | xargs | tr ' ' ','`  # convert hash to comma separated alphabetical list

  # configure app-id permissions
  vault write auth/app-id/map/app-id/$app_id value="$new_roles" display_name=$app_name
fi

vault_logout
exit 0
